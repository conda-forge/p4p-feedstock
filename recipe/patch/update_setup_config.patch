diff --git a/setup.py b/setup.py
index a348dba..db06192 100755
--- a/setup.py
+++ b/setup.py
@@ -8,13 +8,7 @@ import sysconfig
 from setuptools_dso import Extension, setup, cythonize
 
 import numpy
-
-import epicscorelibs.path
-import epicscorelibs.version
-from epicscorelibs.config import get_config_var
-
-import pvxslibs.path
-import pvxslibs.version
+from config import get_config_var
 
 
 def get_numpy_include_dirs():
@@ -27,6 +21,37 @@ with open('src/p4p/version.py', 'r') as F:
     package_version = str(lcl['version'])
     del lcl
 
+_cmplr_class, _os_class, _ta = map(get_config_var, ['CMPLR_CLASS', 'OS_CLASS', 'T_A'])
+if None in (_cmplr_class, _os_class, _ta):
+    raise NotImplementedError("Required config variables not defined")
+
+_epics_path = os.getenv("EPICS_BASE")
+_pvxs_path = os.getenv("PVXS")
+
+epics_inc_paths = [
+    os.path.join(_epics_path, 'include'),
+    os.path.join(_epics_path, 'include', 'compiler', _cmplr_class),
+    os.path.join(_epics_path, 'include', 'os', _os_class)
+]
+
+pvxs_inc_path = os.path.join(_pvxs_path, 'include')
+
+libraries = (get_config_var('LDADD') or []) + ['pvxs', 'Com']
+
+conda_prefix = os.environ.get('PREFIX')
+library_dirs = [
+    os.path.join(conda_prefix, 'Library', 'lib'),
+    os.path.join(_epics_path, 'lib', _ta),
+    os.path.join(_pvxs_path, 'lib', _ta)
+]
+
+extra_link_args_base = get_config_var('LDFLAGS') or []
+if not get_config_var('CMPLR_CLASS') == 'msvc':
+    extra_link_args_base.extend([
+        f"-Wl,-rpath,{_epics_path}/lib/{_ta}",
+        f"-Wl,-rpath,{_pvxs_path}/lib/{_ta}"
+    ])
+
 cxxflags = []
 if get_config_var('CMPLR_CLASS') in ('gcc', 'clang'):
     cxxflags += ['-std=c++11']
@@ -62,17 +87,15 @@ exts = cythonize([
             "src/pvxs_type.cpp",
             "src/pvxs_value.cpp",
         ],
-        include_dirs = get_numpy_include_dirs()+[epicscorelibs.path.include_path, pvxslibs.path.include_path, 'src', 'src/p4p'],
+        include_dirs = get_numpy_include_dirs() + epics_inc_paths + [pvxs_inc_path, 'src', 'src/p4p'],
         define_macros = cppflags + [
             ('PY_ARRAY_UNIQUE_SYMBOL', 'PVXS_PyArray_API'),
             ('PVXS_ENABLE_EXPERT_API', None),
         ],
         extra_compile_args = get_config_var('CXXFLAGS')+cxxflags,
-        extra_link_args = get_config_var('LDFLAGS')+ldflags,
-        dsos = ['pvxslibs.lib.pvxs',
-                'epicscorelibs.lib.Com'
-        ],
-        libraries = get_config_var('LDADD'),
+        extra_link_args = extra_link_args_base + ldflags,
+        library_dirs = library_dirs,
+        libraries = libraries,
     ),
     Extension(
         name='p4p._gw',
@@ -81,14 +104,12 @@ exts = cythonize([
             'src/pvxs_gw.cpp',
             'src/pvxs_odometer.cpp'
         ],
-        include_dirs = get_numpy_include_dirs()+[epicscorelibs.path.include_path, pvxslibs.path.include_path, 'src', 'src/p4p'],
+        include_dirs = get_numpy_include_dirs() + epics_inc_paths + [pvxs_inc_path, 'src', 'src/p4p'],
         define_macros = cppflags + [('PVXS_ENABLE_EXPERT_API', None)],
         extra_compile_args = get_config_var('CXXFLAGS')+cxxflags,
-        extra_link_args = get_config_var('LDFLAGS')+ldflags,
-        dsos = ['pvxslibs.lib.pvxs',
-                'epicscorelibs.lib.Com'
-        ],
-        libraries = get_config_var('LDADD'),
+        extra_link_args = extra_link_args_base + ldflags,
+        library_dirs = library_dirs,
+        libraries = libraries,
     )
 ])
 
@@ -96,8 +117,6 @@ with open(os.path.join(os.path.dirname(__file__), 'README.md')) as F:
     long_description = F.read()
 
 install_requires = [
-    epicscorelibs.version.abi_requires(),
-    pvxslibs.version.abi_requires(),
     'nose2>=0.8.0',
     'ply', # for asLib
 ]
